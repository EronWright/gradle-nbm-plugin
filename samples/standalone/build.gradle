buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url uri('../../plugin/build/repo')
        }
    }
    dependencies {
        classpath group: 'cz.kubacki.gradle.plugins',
                   name: 'nbmPlugin',
                version: '1.0-SNAPSHOT'
        gradleApi()
    }
}
apply plugin: 'nbm'
apply plugin: 'java'

repositories {
    mavenCentral()
    maven {
        url 'http://bits.netbeans.org/maven2/'
    }
}

nbm {
  moduleName = 'com.foo.acme'
}

def generatedClasses = "$buildDir/generated-resources/main"
def generatedResources = "$buildDir/generated-resources/resources"
def generatedOutput = "$buildDir/generated-resources/output"

sourceSets {
    main {
        output.dir(generatedOutput, builtBy: 'generateMyResources')
    }
}

compileJava {
    outputs.dir generatedClasses
    doLast {
        new File(generatedClasses).mkdirs()
        copy {
            from sourceSets.main.output.classesDir
            into generatedClasses
            include '**/*.properties'
            includeEmptyDirs false
        }
        fileTree(dir: sourceSets.main.output.classesDir).include('**/*.properties').visit {
            if (!it.isDirectory()) {
                it.file.delete()
            }
        }
    }
}

processResources {
    outputs.dir generatedResources
    doLast {
        new File(generatedResources).mkdirs()
        copy {
            from sourceSets.main.output.resourcesDir
            into generatedResources
            include '**/*.properties'
            includeEmptyDirs false
        }
        fileTree(dir: sourceSets.main.output.resourcesDir).include('**/*.properties').visit {
            if (!it.isDirectory()) {
                it.file.delete()
            }
        }
    }
}

//a task that generates the resources:
task generateMyResources {
    inputs.file sourceSets.main.output.classesDir
    inputs.file sourceSets.main.output.resourcesDir
    dependsOn compileJava, processResources
    doLast {
        new File(generatedOutput).mkdirs()

        Set<String> paths = new HashSet<>()
        genProperties = fileTree(dir: generatedClasses)
        userProperties = fileTree(dir: generatedResources)

        genProperties.visit { if (!it.file.isDirectory()) paths.add(it.relativePath.pathString) }
        userProperties.visit { if (!it.file.isDirectory()) paths.add(it.relativePath.pathString) }
        println "properties $paths"
        paths.each { String path ->
            // if in both merge else copy
            def dest = new File(generatedOutput, path).parentFile
            dest.mkdirs()
            if (!new File(generatedClasses, path).exists()) {
                copy {
                    from new File(generatedResources, path)
                    into dest
                }
            } else if (!new File(generatedResources, path).exists()) {
                copy {
                    from new File(generatedClasses, path)
                    into dest
                }
            } else {
                def destFile = new File(generatedOutput, path)
                destFile << new File(generatedClasses, path).text
                destFile << '\n'
                destFile << new File(generatedResources, path).text
            }
        }

    }
}

compileJava {
  doFirst {
    project.file("$project.buildDir/src/main/generated-sources").mkdirs()
  }
  options.compilerArgs = ['-s', "$project.buildDir/src/main/generated-sources"]
}

dependencies {
    compile 'org.netbeans.api:org-openide-awt:RELEASE74'
    compile 'org.netbeans.api:org-openide-util:RELEASE74'
    compile 'org.netbeans.api:org-netbeans-api-annotations-common:RELEASE74'
}

// set netbeansInstallDir project property

task netBeansRun(type: Exec) {
    doFirst {
        if (!project.hasProperty('netBeansInstallDir')) {
            throw new GradleException("missing netBeansInstallDir property")
        }
        def confFile = project.file("$project.buildDir/testuserdir/etc/netbeans.conf")
        confFile.parentFile.mkdirs()
        confFile.write "netbeans_extraclusters=\"$project.buildDir/module\""
    }

    workingDir "${project.buildDir}"

    //on windows:
    commandLine netBeansInstallDir + '/bin/netbeans', '--userdir', "$project.buildDir/testuserdir"
}
